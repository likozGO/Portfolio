@import "themes.scss";

@mixin link-color($link, $visit, $hover, $active) {
  a {
    color: $link;

    &:visited {
      color: $visit;
    }

    &:hover {
      color: $hover;
    }

    &:active {
      color: $active;
    }
  }
}


@mixin respond ($breakpoint) {

  @if $breakpoint==_1521_plus {
    @media only screen and (min-width: 1521px) {
      @content;
    }
  }

  @if $breakpoint==_1321_1520 {
    @media only screen and (min-width: 1321px) and (max-width: 1520px) {
      @content;
    }
  }

  @if $breakpoint==_1321_plus {
    @media only screen and (min-width: 1321px) {
      @content;
    }
  }

  @if $breakpoint==_1320_min {
    @media only screen and (max-width: 1320px) {
      @content;
    }
  }

  @if $breakpoint==_1281_1320 {
    @media only screen and (min-width: 1281px) and (max-width: 1320px) {
      @content;
    }
  }

  @if $breakpoint==_1280_min {
    @media only screen and (max-width: 1280px) {
      @content;
    }
  }

  @if $breakpoint==_1199_min {
    @media only screen and (max-width: 1199px) {
      @content;
    }
  }

  @if $breakpoint==_1100_min {
    @media only screen and (max-width: 1100px) {
      @content;
    }
  }

  @if $breakpoint==_1024_min {
    @media only screen and (max-width: 1024px) {
      @content;
    }
  }

  @if $breakpoint==_991_min {
    @media only screen and (max-width: 991px) {
      @content;
    }
  }

  @if $breakpoint==_768_min {
    @media only screen and (max-width: 768px) {
      @content;
    }
  }

  @if $breakpoint==_600_min {
    @media only screen and (max-width: 600px) {
      @content;
    }
  }

  @if $breakpoint==_480_min {
    @media only screen and (max-width: 480px) {
      @content;
    }
  }

  @if $breakpoint==_420_min {
    @media only screen and (max-width: 420px) {
      @content;
    }
  }

  @if $breakpoint==_420_min_height {
    @media only screen and (max-height: 420px) {
      @content;
    }
  }
}


/// Миксин Themify
/// @access private
/// @author Hugo Giraudel
/// @param {String} $property - темизируемое свойство
/// @param {String} $key - ключ цвета, используемого из темы
/// @param {Map} $themes [$themes] - ассоциативный массив с темами
@mixin themify($property, $key, $themes: $themes) {
  // Проход по темам
  @each $theme, $colors in $themes {
    // Создание селектора (типа `.media.theme-unicorn, .theme-unicorn .media`)
    &.theme-#{$theme},
    .theme-#{$theme} & {
      // Вывод декларации
      #{$property}: map-get($colors, $key);
    }
  }
}


/// Темизация цвета шрифта с помощью миксина `themify`
/// @access public
/// @see {mixin} themify
@mixin color($arguments...) {
  @include themify('color', $arguments...);
}

/// Темизация цвета границы элемента с помощью миксина `themify`
/// @access public
/// @see {mixin} themify
@mixin border-color($arguments...) {
  @include themify('border-color', $arguments...);
}

/// Темизация цвета фона элемента с помощью миксина `themify`
/// @access public
/// @see {mixin} themify
@mixin background-color($arguments...) {
  @include themify('background-color', $arguments...);
}

/// Темизация цвета фона элемента с помощью миксина `themify`
/// @access public
/// @see {mixin} themify
@mixin background-image($arguments...) {
  @include themify('background-image', $arguments...);
}

/// Темизация тени с помощью миксина `themify`
/// @access public
/// @see {mixin} themify
@mixin box-shadow($arguments...) {
  @include themify('box-shadow', $arguments...);
}

/// Темизация fill с помощью миксина `themify`
/// @access public
/// @see {mixin} themify
@mixin fill($arguments...) {
  @include themify('fill', $arguments...);
}

/// Темизация stroke с помощью миксина `themify`
/// @access public
/// @see {mixin} themify
@mixin stroke($arguments...) {
  @include themify('stroke', $arguments...);
}
